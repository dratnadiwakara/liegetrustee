# Generated by Django 3.2.4 on 2021-07-01 14:44

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=200)),
                ('client_address', models.CharField(max_length=200)),
                ('client_email', models.EmailField(max_length=254)),
                ('client_phone', models.CharField(max_length=20)),
                ('client_type', models.CharField(choices=[('custodian', 'Custodian Client'), ('margin', 'Margin Client'), ('unittrust', 'Unit Trust')], max_length=20)),
                ('current_account_balance', models.FloatField(default=0)),
                ('current_account_balance_date', models.DateField()),
                ('margin_account_balance', models.FloatField(default=0)),
                ('margin_account_balance_date', models.DateField()),
                ('maximum_margin', models.FloatField()),
                ('maximum_margin_date', models.DateField()),
                ('payable_amount', models.FloatField()),
                ('payable_amount_date', models.DateField()),
                ('receivable_amount', models.FloatField()),
                ('receivable_amount_date', models.DateField()),
                ('client_id', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='EquityTrade',
            fields=[
                ('trade_price', models.FloatField()),
                ('trade_quantity', models.FloatField()),
                ('trade_date', models.DateField()),
                ('settlement_date', models.DateField()),
                ('trade_direction', models.CharField(choices=[('buy', 'Buy'), ('sell', 'Sell')], max_length=10)),
                ('brokerage', models.FloatField(default=0)),
                ('cds_fees', models.FloatField(default=0)),
                ('sec_cess', models.FloatField(default=0)),
                ('btt', models.FloatField(default=0)),
                ('cse_fees', models.FloatField(default=0)),
                ('stamp_duty', models.FloatField(default=0)),
                ('govt_cess', models.FloatField(default=0)),
                ('trx_contract', models.CharField(max_length=200, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ListedEquity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(max_length=20)),
                ('company_name', models.CharField(max_length=100)),
                ('current_price', models.FloatField()),
                ('current_price_date', models.DateField()),
                ('in_sl20', models.BooleanField()),
                ('margin_pct', models.FloatField(default=0.5)),
            ],
        ),
        migrations.CreateModel(
            name='StockBroker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_name', models.CharField(max_length=200)),
                ('broker_code', models.CharField(default='AAA', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Uploads',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_date', models.DateField(auto_now_add=True)),
                ('uploaded_file', models.FileField(upload_to='')),
                ('uploaded_by', models.CharField(blank=True, max_length=200, null=True)),
                ('upload_type', models.CharField(choices=[('equityprices', 'Equity Price List'), ('cdstrades', 'CDS Trade List')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='MarginAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_account_sweep', models.BooleanField(default=False)),
                ('trade_date', models.DateField()),
                ('settlement_date', models.DateField()),
                ('debit', models.BooleanField()),
                ('amount', models.FloatField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.client')),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='custodian.equitytrade')),
            ],
        ),
        migrations.AddField(
            model_name='equitytrade',
            name='broker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.stockbroker'),
        ),
        migrations.AddField(
            model_name='equitytrade',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.client'),
        ),
        migrations.AddField(
            model_name='equitytrade',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.listedequity'),
        ),
        migrations.CreateModel(
            name='EquityHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField()),
                ('cost_basis', models.FloatField()),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('broker', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='custodian.stockbroker')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.client')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.listedequity')),
            ],
        ),
        migrations.CreateModel(
            name='DividendAnnouncements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dividend_amount', models.FloatField()),
                ('ex_date', models.DateField()),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('equity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='custodian.listedequity')),
            ],
        ),
        migrations.CreateModel(
            name='ClientHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portfolio_value', models.FloatField()),
                ('margin_balance', models.FloatField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.client')),
            ],
        ),
        migrations.CreateModel(
            name='CDSAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_transfer_to_CDS', models.BooleanField(default=False)),
                ('trade_date', models.DateField()),
                ('settlement_date', models.DateField()),
                ('credit', models.BooleanField()),
                ('amount', models.FloatField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='custodian.client')),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='custodian.equitytrade')),
            ],
        ),
        migrations.CreateModel(
            name='CustodyClient',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('custodian.client',),
        ),
    ]
